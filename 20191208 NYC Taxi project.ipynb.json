{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NYC Taxi fare amount prediction project\n",
    "\n",
    "Eunhee Lim\n",
    "2019/12/8 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import relevant libraries and packages for project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn\n",
    "import seaborn as sns\n",
    "import geopandas as gpd\n",
    "import datetime as dt\n",
    "import time\n",
    "from math import sin, cos, sqrt, atan2, radians\n",
    "from shapely.geometry import Polygon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Load data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, I will explore the time it takes to load training data. Train.csv file contrains 55M rows of data. Opening the full file takes about 7 minutes. In order to expedite the data exploration and analysis, I will first work with 10,000 rows of data which takes about 1 second to load."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n",
      "1.0738821029663086\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "print(\"hello\")\n",
    "df_train = pd.read_csv('/Users/prq-210/ML bootcamp/train.csv', nrows=10000, parse_dates=['pickup_datetime'])\n",
    "end = time.time()\n",
    "print(end - start)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Preliminary examination of raw data\n",
    "\n",
    "I will look at the first five rows of data using .head(). I see that there are 8 features including\n",
    "\n",
    "    key\n",
    "    fare_amount\n",
    "    pickup_datetime\n",
    "    pickup_longitude\n",
    "    pickup_latitude\n",
    "    dropoff_longitude\n",
    "    dropoff_latitude\n",
    "    passenger_count\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2009-06-15 17:26:21.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21+00:00</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-05 16:52:16.0000002</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16+00:00</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011-08-18 00:35:00.00000049</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00+00:00</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012-04-21 04:30:42.0000001</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42+00:00</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2010-03-09 07:51:00.000000135</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00+00:00</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "0    2009-06-15 17:26:21.0000001          4.5 2009-06-15 17:26:21+00:00   \n",
       "1    2010-01-05 16:52:16.0000002         16.9 2010-01-05 16:52:16+00:00   \n",
       "2   2011-08-18 00:35:00.00000049          5.7 2011-08-18 00:35:00+00:00   \n",
       "3    2012-04-21 04:30:42.0000001          7.7 2012-04-21 04:30:42+00:00   \n",
       "4  2010-03-09 07:51:00.000000135          5.3 2010-03-09 07:51:00+00:00   \n",
       "\n",
       "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "0        -73.844311        40.721319         -73.841610         40.712278   \n",
       "1        -74.016048        40.711303         -73.979268         40.782004   \n",
       "2        -73.982738        40.761270         -73.991242         40.750562   \n",
       "3        -73.987130        40.733143         -73.991567         40.758092   \n",
       "4        -73.968095        40.768008         -73.956655         40.783762   \n",
       "\n",
       "   passenger_count  \n",
       "0                1  \n",
       "1                1  \n",
       "2                2  \n",
       "3                1  \n",
       "4                1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 8)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 8 columns):\n",
      "key                  10000 non-null object\n",
      "fare_amount          10000 non-null float64\n",
      "pickup_datetime      10000 non-null datetime64[ns, UTC]\n",
      "pickup_longitude     10000 non-null float64\n",
      "pickup_latitude      10000 non-null float64\n",
      "dropoff_longitude    10000 non-null float64\n",
      "dropoff_latitude     10000 non-null float64\n",
      "passenger_count      10000 non-null int64\n",
      "dtypes: datetime64[ns, UTC](1), float64(5), int64(1), object(1)\n",
      "memory usage: 625.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using .describe(), we can look at statistical information of each features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>11.235464</td>\n",
       "      <td>-72.466660</td>\n",
       "      <td>39.920448</td>\n",
       "      <td>-72.474094</td>\n",
       "      <td>39.893281</td>\n",
       "      <td>1.644700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>9.584258</td>\n",
       "      <td>10.609729</td>\n",
       "      <td>7.318932</td>\n",
       "      <td>10.579732</td>\n",
       "      <td>6.339919</td>\n",
       "      <td>1.271229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-2.900000</td>\n",
       "      <td>-74.438233</td>\n",
       "      <td>-74.006893</td>\n",
       "      <td>-74.429332</td>\n",
       "      <td>-73.994392</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>-73.992058</td>\n",
       "      <td>40.734547</td>\n",
       "      <td>-73.991112</td>\n",
       "      <td>40.735230</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>-73.981758</td>\n",
       "      <td>40.752693</td>\n",
       "      <td>-73.980083</td>\n",
       "      <td>40.753738</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>-73.966925</td>\n",
       "      <td>40.767694</td>\n",
       "      <td>-73.963504</td>\n",
       "      <td>40.768186</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>180.000000</td>\n",
       "      <td>40.766125</td>\n",
       "      <td>401.083332</td>\n",
       "      <td>40.802437</td>\n",
       "      <td>41.366138</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
       "count  10000.000000      10000.000000     10000.000000       10000.000000   \n",
       "mean      11.235464        -72.466660        39.920448         -72.474094   \n",
       "std        9.584258         10.609729         7.318932          10.579732   \n",
       "min       -2.900000        -74.438233       -74.006893         -74.429332   \n",
       "25%        6.000000        -73.992058        40.734547         -73.991112   \n",
       "50%        8.500000        -73.981758        40.752693         -73.980083   \n",
       "75%       12.500000        -73.966925        40.767694         -73.963504   \n",
       "max      180.000000         40.766125       401.083332          40.802437   \n",
       "\n",
       "       dropoff_latitude  passenger_count  \n",
       "count      10000.000000     10000.000000  \n",
       "mean          39.893281         1.644700  \n",
       "std            6.339919         1.271229  \n",
       "min          -73.994392         0.000000  \n",
       "25%           40.735230         1.000000  \n",
       "50%           40.753738         1.000000  \n",
       "75%           40.768186         2.000000  \n",
       "max           41.366138         6.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Closer look at each features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a few abnormalities detected from .describe().\n",
    "\n",
    "    Fare amount:       Max value of $180 seems a bit too high given (mean, std) of (11.2, 9.6). \n",
    "    Pickup_longitude:  City of New York should have longitude values ranging from -75~-73. \n",
    "    Pickup_latitude:   City of New York should have latitude values ranging from 40~41. \n",
    "    Dropoff_longitude: City of New York should have longitude values ranging from -75~-73. \n",
    "    Dropoff_latitude:  City of New York should have latitude values ranging from 40~41. \n",
    "    Passenger count:   Number of passengers should be between 1 and 6. \n",
    "    \n",
    "I will need extra caution in looking at distributions as I have loaded 10,000 rows out of 55M rows. I should be careful that there could be more outliers/wrong/missing data in the rest of the raw dataset. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.1 Fare amount\n",
    "\n",
    "Distrubition of fare amount shows that most of the trips are below $50.\n",
    "\n",
    "\n",
    "From closer examination below, we see that row corresponding to $180 has same pickup and dropoff locations. This is likely a wrong data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "key                  2013-01-16 20:19:58.0000001\n",
       "fare_amount                                  180\n",
       "pickup_datetime        2013-01-16 20:19:58+00:00\n",
       "pickup_longitude                        -74.4293\n",
       "pickup_latitude                             40.5\n",
       "dropoff_longitude                       -74.4293\n",
       "dropoff_latitude                            40.5\n",
       "passenger_count                                1\n",
       "Name: 1335, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=sns.distplot(df_train.fare_amount, bins=20)\n",
    "df_train['fare_amount'].idxmax()\n",
    "df_train.iloc[1335]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.1 Pickup and dropoff locations\n",
    "\n",
    "From plots below, we see that many of the longitude and latitude values are out side of range below, indicating that these rows should be discarded.\n",
    "\n",
    "        NYC Longitude range: -75~-73\n",
    "        NYC Latitude range : 40~41\n",
    "        \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, axes = plt.subplots(2, 2, figsize=(10, 10))\n",
    "\n",
    "ax_1=sns.distplot(df_train.pickup_longitude,ax=axes[0, 0])\n",
    "ax_2=sns.distplot(df_train.dropoff_longitude,ax=axes[0, 1])\n",
    "ax_3=sns.distplot(df_train.pickup_latitude,ax=axes[1, 0])\n",
    "ax_4=sns.distplot(df_train.dropoff_latitude,ax=axes[1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a18f09fd0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='pickup_longitude',y='pickup_latitude',data=df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1a024910>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='dropoff_longitude',y='dropoff_latitude',data=df_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.2 Passenger count\n",
    "\n",
    "The total number of passenger per taxi cannot exceed 6 people. While examination in this MWS looks OK, there could be outliers in the raw data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW4AAAEKCAYAAAAyx7/DAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi40LCBodHRwOi8vbWF0cGxvdGxpYi5vcmcv7US4rQAAHiJJREFUeJzt3Xl4XdV57/Hvq3m0ZNmysWXZsgyYYAI2cRhTplBCJjKUNMAlE22dXjLf3vCE9rYNN22TPrlN4GmTNIRACISQlJAmIQmEJDiEySCDjScMtiXbsmxrsmTN0tF57x97C4St4cg+g7b8+zyc50z77PPqcPzT0tprrW3ujoiIREdWpgsQEZGpUXCLiESMgltEJGIU3CIiEaPgFhGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiMlJxU7nzp3rNTU1qdi1iMiMtH79+lZ3r0xk25QEd01NDXV1danYtYjIjGRmuxPdVl0lIiIRk1Bwm1m5mT1gZi+Z2TYzOz/VhYmIyNgS7Sq5DXjY3a82szygKIU1iYjIBCYNbjObBVwEfBTA3QeBwdSWJSIi40mkq6QWaAHuMrMXzOwOMys+ciMzW2NmdWZW19LSkvRCRUQkkEhw5wBnA99y91VAD/CFIzdy99vdfbW7r66sTGhEi4iIHINEgrsRaHT3deH9BwiCXEREMmDS4Hb3A8BeM1sePvRWYGtKqxIRkXElOqrkU8APwhElu4CPpa6kE8t96/Yc9dh15y7OQCUiEhUJBbe7bwBWp7gWERFJgGZOiohEjIJbRCRiFNwiIhGj4BYRiRgFt4hIxCi4RUQiRsEtIhIxCm4RkYhRcIuIRIyCW0QkYhTcIiIRo+AWEYkYBbeISMQouEVEIkbBLSISMQpuEZGIUXCLiESMgltEJGIU3CIiEaPgFhGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiFFwi4hEjIJbRCRichLZyMwagC5gGIi5++pUFiUiIuNLKLhDl7p7a8oqERGRhKirREQkYhINbgd+Y2brzWzNWBuY2RozqzOzupaWluRVKCIir5NocF/o7mcDbwc+YWYXHbmBu9/u7qvdfXVlZWVSixQRkdckFNzu3hReNwM/Bc5JZVEiIjK+SYPbzIrNrHTkNnAFsDnVhYmIyNgSGVUyH/ipmY1sf5+7P5zSqkREZFyTBre77wLOSkMtIiKSAA0HFBGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiFFwi4hEjIJbRCRiFNwiIhGj4BYRiRgFt4hIxCi4RUQiRsEtIhIxCm4RkYhRcIuIRIyCW0QkYhTcIiIRo+AWEYkYBbeISMQouEVEIkbBLSISMQpuEZGIUXCLiESMgltEJGIU3CIiEaPgFhGJGAW3iEjEJBzcZpZtZi+Y2UOpLEhERCY2lRb3Z4BtqSpEREQSk1Bwm9ki4J3AHaktR0REJpNoi/tW4CYgPt4GZrbGzOrMrK6lpSUpxYmIyNEmDW4zexfQ7O7rJ9rO3W9399XuvrqysjJpBYqIyOsl0uK+ELjKzBqA+4HLzOzelFYlIiLjmjS43f1md1/k7jXANcDv3f36lFcmIiJj0jhuEZGIyZnKxu6+FlibkkpERCQhanGLiESMgltEJGIU3CIiEaPgFhGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiFFwi4hEjIJbRCRiFNwiIhGj4BYRiRgFt4hIxCi4RUQiRsEtIhIxCm4RkYhRcIuIRIyCW0QkYhTcIiIRo+AWEYkYBbeISMQouEVEIkbBLSISMQpuEZGIUXCLiESMgltEJGImDW4zKzCzZ81so5ltMbNb0lGYiIiMLSeBbQaAy9y928xygSfM7Nfu/kyKaxMRkTFMGtzu7kB3eDc3vHgqixIRkfEl1MdtZtlmtgFoBh5193WpLUtERMaTUHC7+7C7rwQWAeeY2RlHbmNma8yszszqWlpakl2niIiEpjSqxN07gLXAlWM8d7u7r3b31ZWVlUkqT0REjpTIqJJKMysPbxcClwMvpbowEREZWyKjShYAd5tZNkHQ/9jdH0ptWSIiMp5ERpW8CKxKQy0iIpIAzZwUEYkYBbeISMQouEVEIkbBLSISMQpuEZGIUXCLiESMgltEJGIU3CIiEaPgFhGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiFFwi4hEjIJbRCRiFNwiIhGj4BYRiRgFt4hIxCi4RUQiRsEtIhIxCu5poL61h417OzJdhohExKRneZfUGo47/1W3l57BGCsWziInW79LRWRiSokM27D3EB19QwwNO7vbezNdjohEgII7g4bjztrtLcwrzSfLYEdzd6ZLEpEIUHBn0K827aetZ5C3vmE+iyuKeeVgV6ZLEpEIUHBniLvzjcd2UFmSz4qFszh1fglNnf10D8QyXZqITHMK7gw5eHiAlw50cc7SCrLMOHleCQA7mtXqFpGJTRrcZlZtZo+Z2TYz22Jmn0lHYTPdrtagP3v+rAIAFpYXUpSXzSsH1c8tIhNLZDhgDPgbd3/ezEqB9Wb2qLtvTXFtM1p9aw8Ac0vyAF5tde9o7sbdMbNMlici09ikLW533+/uz4e3u4BtQFWqC5vp6lt6KMjNYlZh7quPnTKvhK6BGNt1kFJEJjClPm4zqwFWAevGeG6NmdWZWV1LS0tyqpvB6lt7qJlTTNaolnVVeRGAuktEZEIJB7eZlQA/AT7r7oePfN7db3f31e6+urKyMpk1zkj1rT0snVv8usdmFwet7z2aiCMiE0gouM0slyC0f+DuD6a2pJlvaDjOnvbeo4I7Pyeb4vwc9iq4RWQCiYwqMeC7wDZ3/1rqS5r5Gg/1EYv7UcENUFGUy95DCm4RGV8iLe4LgQ8Bl5nZhvDyjhTXNaPVh0MBayvHCO7iPHWViMiEJh0O6O5PABqblkS7WoKhgEvnlrD9wOsPRM4uzmNz02GGhuPkaqVAERmDkiED6lt7KCvMZXZR7lHPVRTlMRx39nf0Z6AyEYkCBXcGjIwoGWuSTUVxMCFH/dwiMh4FdwbUt/ZQO8aBSXgtuNXPLSLjUXCnWe9gjP2d/WOOKAGYVZhLbrYpuEVkXAruNGtoDQJ56RgjSiBYs6SqvFDBLSLjUnCn2cjiUuO1uAGqK4o0CUdExqXgTrOGtiC4a+aMH9yLFdwiMgEFd5o1dfQxuyiX4vzxh9AvrijiUO8Qh/uH0liZiESFgjvN9nX0sbC8cMJtqiuCVQLV6haRsSi406ypo4+qSYJ7sYJbRCag4E4jd2ffoam0uPvSUZaIRIyCO40O98XoGRxm0eyJg7usMJeywlx2t/ekqTIRiRIFdxrt6wha0JO1uAEWzS6k8ZBa3CJyNAV3Go0E92R93CPbNHUouEXkaAruNGqaQou7anYh+w714e6pLktEIkbBnUb7OvrIy8libknepNtWlRfSMzhMZ5/GcovI6ym402hfOBRwrOVcjzTSnbJP3SUicgQFdxrtOzT5GO4RVeHIk306QCkiR1Bwp1FTRx8LywsS2lYtbhEZj4I7TQZiwzR3DVBVXpTQ9hXFeRTkZqnFLSJHUXCnyYHO4BySiba4zYyF5YU0dSq4ReT1FNxp8uoY7klmTY5WVV6oFreIHEXBnSYjAZzowUkIZk+qj1tEjjT+otCSVE0d/ZjBSWWJdZUALCwrpLV7kP6hYQpys1NYXWLuW7dnzMevO3dxmisRObGpxZ0m+zp6qSzJJz8n8QAe6VbR1HcRGU3BnSZNHf1T6t8GDQkUkbFNGtxmdqeZNZvZ5nQUNFM1HupNaI2S0TQJR0TGkkiL+3vAlSmuY0aLDcdpPNRHzZzExnCPmD+rgCxTV4mIvN6kwe3ujwPtaahlxmrq6CcWd5ZUjH9m97HkZmdx0qwCGhXcIjJK0vq4zWyNmdWZWV1LS0uydjsjjJzJZskUW9zw2vKuIiIjkhbc7n67u69299WVlZXJ2u2M0NAWnPS3Zu7UWtwQTsJRi1tERtGokjTY3dpDQW4W80rzp/zaheWFHOjsZziuEyqISEDBnQa723tZUlGc0DrcR1oyp4hY3HWAUkRelchwwB8CTwPLzazRzP4i9WXNLLvbelh8DP3bALWVJQDsbOlOZkkiEmGTTnl392vTUchMFY87u9t6ufjUY+v3rw37xXe29HDJ8mRWJiJRpa6SFGvuGmAgFmfxnKkfmIRgXe6ywlx2qcUtIiEFd4o1tAVDAac6+WaEmVFbWcyulp5kliUiEabgTrHdrwb3sbW4AWrnlrCrVS1uEQkouFNsd1svOVnGgiks53qk2spiDh4eoHsglsTKRCSqFNwptrutl+qKInKyj/2jXlYZtNbr1V0iIii4U66hrYfFFcfWvz1iZEiguktEBBTcKeXu7GnrPeYDkyOWzCkiy4IhgSIiCu4Uau8ZpGsgxpLjODAJkJ+TzaLZRRoSKCKAgjul6luPfVXAIy2rLFaLW0QAnSw4pV5s7ARgxcKy495XbWUJT+9qIx53srKmvuaJSKqNdTJpnUg6NdTiTqGNjR2cNKtgSmd2H09tZTH9Q3H2H+5PQmUiEmUK7hTasLeDs6qPv7UNwSQcQP3cIqLgTpVDPYPsbutlZfXspOxv2bzgAOcrB6dPcA8NxzNdgsgJSX3cKbKhsQMgaS3uypJ8qsoLea6hnRvesjQp+zwWTR19rN3eTOOhPjr6hjh3aQUffHM12ep3F0kbtbhTZOPeDszgzEXlSdmfmXFubQXr6tuJZ+hsOB29g9z1VAO7WnuorihiVXU56+rb+et719M3OJyRmkRORAruFNmwt4NT5pVQkp+8P2rOr51De88grzSnv7ukZyDGPc/sJjYcZ82f1HLtOYv5wOpq3nXmAn677SAfv3c97jq9mkg6KLhTwN3ZuLeDldXJaW2POK92DgBP72xN6n4n4+7c9MCLHOjs59pzFjNv1mujZC5YNpcvvnsFj7/cwoPP70trXSInKvVxp8Ce9l4O9Q5xVpKDu7qiiKryQp7Z1c5HL0xfP/dvth7kl5v287bT53Pq/NKjnv/QeUv42YZ9/NMvt3LpafOoKM5LW21TpbHGMhOoxZ0CG/YGByaT3eIGOH/ZHNbVt6Wtn7t3MMb//cVWls8v5S2njH36taws41/e/0a6+mN8+Vfb0lKXyIlMwZ0CL+zpoCA3i+VjtE6P13m1czjUO8T2g11J3/dYvvHYDvZ19PGl954x4ciR006axV9dVMt/rW/k6Z1taalN5ESl4E6ywVich15s4i0nVx7XGtzjOa+2AoBndqU+HHc0d3P747t4/9lVnLO0YtLtP33ZKVRXFPJ3/72JgZhGmZyohuNOXAeqU0p93En28JYDtHYPcv15qek3XTS7iOqKQp7e2cbHUtjPPRx3bnpgI0V5Odz89jck9JrCvGz+6b1v5CN3Psu31u7ks5efmrL6ZHpxd14+2MWGvR1sbTqMGSwsL6S1e4C/+pNaCvOyM13ijKIWd5Ld+8xuFlcUcdE4/cHJcOnyeazd3sK+jr6UvcddT9bz/J4ObrlqBZWl+Qm/7uJTK7nqrIV887Gd7NT0/BNCe88gf3l3Hd97qoGXDhzmzEVlrKwuZ2g4ztcefZm33fo4T6V5JNRMp+BOopcPdvFsfTvXnbs4pSv4ffziZQD8++9eScn+d7V089VHtnP5G+bznpULp/z6v3/X6RTkZvHpH74wbSbmDMbidPUP0T80zHCGJjDNRM81tPOO2/7IH19p5Z1vXMDfvv0NvP/sRbxnZRU3XnIy9685DzO47jvr+OojL2Vs8thMo66SJLpv3R7ysrP4wJsWpfR9qsoLue7cxdzzzG4+fvEyls49vhM1jNbZO8Qn7nuB/Jws/uV9Z2A29V9AlaX53HbNKm64+zk+/8BG/v3aVce0n+PVOxjjV5sO8MiWAzz+cgsDsWBtldxs49T5paxYWMaKhbPSXleixhq6CNNj+KK7c++6Pdzy8y0sml3Igzde8OoyxqOdVzuHhz9zEbf8YgvfeGwn2w908fUPrqS0IDcDVb8m6sNCFdxJsqO5iwfWN/KON57EnJLEuxaO1Y2XLuP+5/Zw629f5rZrViVln139Q3z4rmfZ2dzNHR9Z/bqJNlN16WnzuOltp/GvD7/EaSeV8snLTklKjYk43D/EPU/v5rtP1NPeM8jCsgKueXM11RVFPL/7EG09g2zdf5gtTYcpLchhMBbnunMXU5zEWa4zWe9gjC89tJUfPruXy06bx63XrGRWQe6YwQ3BsY8vv/+NnL5wFrf8YitX/ceTfP2DK1MyXPZEkdA31cyuBG4DsoE73P0rKa0qYupbe7juO+soyM3mc3+angNy80oL+OgFS/n24zu5ZHkl71t1fK38ve29fO5HG9iyr5P/vP5NXHTq8ffR//XFtbx04DD/7zcv09DWyy1XrUhpOLb3DHLXk/V876kGuvpjXLK8khsvOZk318x+tcV/X17Q0nr3WQvZ1dLDH15u5p9/tY1vrt3BDRcu5cMX1FBWmNnWYGfvEPVtPWze10nPYIxsM3Kys5hdlEtlGhoFE1m7vZm/++lm9nX0ceMly/ibK5YntMCYmfHh82tYPr+Uz/1oA3/2raf41GUns+aiWoryMvMLM+5Oe88gnX1D9A4O88D6RsoKc6kozmXp3JJpPZFs0k/MzLKBbwB/CjQCz5nZz919a6qLm+5iw3Ge2NHKzQ9uIhZ37l9z3nGfX3Iqbrx0Gc/vPsTnfrSRdbva+Yd3nz7lfwQHOvv5/tMN3PFEPdlm3HbNKi4/fX5S6jMz/u0DZ7G4ooj/eGwH63cf4hOXnswVK+YzK0l/KvcMxHhyRys/39jEb7cdpH8ozpUrTuKTl53MGVXjr8yYZcbJ80o4eV4Jpy0o5Ru/38G/Pfoy//mHnVyx4iTefdYCzqudk/JQ6R6I8dL+w2zY28GLjZ282NhBQ1vvhK/59h93cWZVGWcuKufM6jLOrCpL6V95fYPD/Hrzfn703F7W1bezrLKYH3/8/ISGiB7p3No5/PqzF/GPP9vMrb99hbufauBD5y3hfWcvomZOUcq61IaG47xysJvN+zrZ3NTJ2u0tHOjsZ3DU0sQ/fPb13ScLywo4PexOO6MquF5QVpCRbr8j2WQLA5nZ+cAX3f1t4f2bAdz9y+O9ZvXq1V5XVzflYn62YR8DsTjxuDPsHlzHnWGHeNwZHI7TPzQcXsLbseB6ILwejMU51DNIdraRk2XkZGWRnWUsP6mUgtwsCnKyKcjNDm7nZpOfm02WgWGM/P8wwMLHwv9w59X3b+0e5EBnH0/saKW1e5C5Jfl8/4ZzOP0Y+kuPt68tFh65/+baneRlZ7GyupwzF5UxuziP0oIczAwf+Sw92L6tZ5CDh/t5sbHz1fNivm9VFTdduZwFZYVTqjXRep/e2cbND75IQ1tvUOficpZUFLGwvJCC3GzycrKCS7aRnZVFPO7E4s5wPB5eB5eBWJy27gGauwbYfrCL+tYe3KGiOI+3n3ESH7mgZsxp+RP9DCP1b2nq5PtP7ebhLQfo7Bsiy2BZZQmnzi+lsjSfOcV55OdmkZsdXPKyg++WE7TecHCcuAffl7g7DuBB3b2Dw3T1D9HaHXz+9a097O987YxGC8sKOHNROWdVl3PyvBI27u2gOD+HuDtDw3EO9QzR0tVPQV42mxo72dHSzcg/37kl+SyuKKRqdhGlBTmU5udQkp9DSUEO+TnZR323g9ujHiQYAjo0HKd7IEZH7xAtXQNs23+YHc3dxOLO4ooirjt3MR+7sIb8nKOH9031u1zX0M63H9/Fo1sPAsGxkbMWlTF/VgHzSgsozAs+55zs174XHn6m7sHnHPeRzzv4jscdBmJxugeG6Owb4kBnP/s6+tnZ3P1qSBfnZVNZms+C8kIWzCqgojiPorwcrn7TIjr7hmjtGeCVg11saQq603aO+pwrivNYVlnM/FkFVJbmU5SXTWHuSKZkM6swl6vOmvoBfQAzW+/uqxPaNoHgvhq40t3/Mrz/IeBcd//kEdutAdaEd5cD26daeBLNBaI2/kg1p4dqTg/VPHVL3D2hPspE/g4c6++Co9Le3W8Hbk/kTVPNzOoS/c01Xajm9FDN6aGaUyuRcdyNQPWo+4uAptSUIyIik0kkuJ8DTjGzpWaWB1wD/Dy1ZYmIyHgm7Spx95iZfRJ4hGA44J3uviXllR2fadFlM0WqOT1Uc3qo5hSa9OCkiIhML1qrREQkYhTcIiIRM6OC28yuNLPtZrbDzL6Q6XoSYWZ3mlmzmW3OdC2JMLNqM3vMzLaZ2RYz+0yma0qEmRWY2bNmtjGs+5ZM15QIM8s2sxfM7KFM15IoM2sws01mtsHMpj4TLwPMrNzMHjCzl8Lv9vmZrmkiM6aPO5ya/zKjpuYD1073qflmdhHQDXzf3c/IdD2TMbMFwAJ3f97MSoH1wHsj8DkbUOzu3WaWCzwBfMbdn8lwaRMys/8FrAZmufu7Ml1PIsysAVjt7pGZgGNmdwN/dPc7wtFzRe7ekem6xjOTWtznADvcfZe7DwL3A+/JcE2TcvfHgfZM15Eod9/v7s+Ht7uAbUBVZquanAdGzuyQG16mdavFzBYB7wTuyHQtM5mZzQIuAr4L4O6D0zm0YWYFdxWwd9T9RiIQKFFmZjXAKmBdZitJTNjtsAFoBh519+le963ATUB8sg2nGQd+Y2brw6UwprtaoAW4K+yWusPM0rda3DGYScGd0NR8SQ4zKwF+AnzW3Q9nup5EuPuwu68kmP17jplN264pM3sX0Ozu6zNdyzG40N3PBt4OfCLsDpzOcoCzgW+5+yqgB5jWx8hmUnBran6ahH3EPwF+4O4PZrqeqQr/DF4LXJnhUiZyIXBV2F98P3CZmd2b2ZIS4+5N4XUz8FOCbszprBFoHPUX2AMEQT5tzaTg1tT8NAgP8n0X2ObuX8t0PYkys0ozKw9vFwKXAy9ltqrxufvN7r7I3WsIvsu/d/frM1zWpMysODxoTdjdcAUwrUdMufsBYK+ZLQ8feiswrQ+2z5hzNUV0aj5m9kPgEmCumTUC/+ju381sVRO6EPgQsCnsLwb4W3f/VQZrSsQC4O5w9FEW8GN3j8wQuwiZD/w0PNlADnCfuz+c2ZIS8ingB2GjbxfwsQzXM6EZMxxQROREMZO6SkRETggKbhGRiFFwi4hEjIJbRCRiFNwiIhGj4BaZJszss2ZWlOk6ZPrTcECRUcws292HM/TeDURsVT3JDLW4JSnMrCZcy/huM3sxXNu4yMz+wcyeM7PNZnZ7OPMSM/u0mW0Nt70/fOzicA3nDeFiPyMz8D4f7uPFkXW0w/fbZmbfCdfX/k04IxIze3O47dNm9tWRtc7DRaa+OmpfHw8fvyRcY/w+YNMEP+OHw9dtNLN7wseWmNnvwsd/Z2aLw8e/Z2ZXj3pt96j3Wjtq7ecfWODTwELgMTN7LMn/e2SmcXdddDnuC1BDsKjXheH9O4H/DVSM2uYe4N3h7SYgP7xdHl7/YtTrSwhm3l1BcBJXI2hoPESwBGcNEANWhtv/GLg+vL0ZuCC8/RVgc3h7DfB/wtv5QB2wlGDmag+wdIKfbwWwHZgb3q8YVfNHwts3AP8d3v4ecPWo13eH15cAnQRr6WQBTwNvCZ9rGNm/LrpMdFGLW5Jpr7s/Gd6+F3gLcKmZrTOzTcBlBAEI8CLBFOPrCQIY4Enga2Hrs9zdYwTBfQXwAvA8cBpwSrh9vbuPTLtfD9SE65GUuvtT4eP3jarvCuDD4VT9dcCcUft61t3rJ/jZLgMe8LAbw91H1lA/f9R73BP+zJN51t0b3T0ObCD4JSSSsBmzVolMC0ceMHHgmwT9tnvN7ItAQfjcOwlazlcBf29mK9z9K2b2S+AdwDNmdjlBS/vL7v7t0TsO1wIfGPXQMFDI2Mv7vvoy4FPu/sgR+7qEoMU9ERvj5xvLyDYxwq7IsHsob9Q2R9atf4cyJWpxSzItttfO1XctwenBAFrD9buvBjCzLKDa3R8jOFFAOVBiZsvcfZO7/ytBN8ZpBIuG3RC+HjOrMrN54xXg7oeALjM7L3zomlFPPwL8z3BZWszs1CksmP874M/NbE742orw8adGvcf/GPUzNwBvCm+/h+CMO5PpAkoTrEdOYPpNL8m0DfiImX0beAX4FjCb4IBfA8HSuxCs3nivmZURtGS/7u4dZvYlM7uUoBW6Ffi1uw+Y2RuAp8Pjmt3A9eE24/kL4Dtm1kOw7nZn+PgdBN0Sz4et4BbgvYn8YO6+xcz+GfiDmQ0TdN18FPg0cKeZfT7c38iqct8BfmZmzxKE/mQtegj68n9tZvvd/dJE6pITk4YDSlKEXRcP+TQ44bGZlXh4fkkz+wLByY0jcTZ6kUSoxS0z0TvN7GaC7/dugpaxyIyhFrfIKGEf9u/GeOqt7t6W7npExqLgFhGJGI0qERGJGAW3iEjEKLhFRCJGwS0iEjEKbhGRiPn/D6s5ORjWG40AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=sns.distplot(df_train.passenger_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.3 Missing values\n",
    "\n",
    "Lastly, I will check if there are any missing values in the dataset. Although this MWS has no missing values, there could be missing values in the raw data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count      0\n",
       "dropoff_latitude     0\n",
       "dropoff_longitude    0\n",
       "pickup_latitude      0\n",
       "pickup_longitude     0\n",
       "pickup_datetime      0\n",
       "fare_amount          0\n",
       "key                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check to see if there are any missing values in data\n",
    "df_train.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.3 Cleaning data\n",
    "\n",
    "Here, rows with missing values, outliers, etc will be removed from the working set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with missing values, wrong values, outliers, etc\n",
    "df_train = df_train.drop(df_train[df_train.isnull().any(1)].index, axis = 0)\n",
    "df_train = df_train.drop(df_train[df_train['fare_amount']<0].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['fare_amount']>100].index, axis=0)\n",
    "\n",
    "df_train = df_train.drop(df_train[df_train['pickup_longitude']<-75].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['pickup_longitude']>-73].index, axis=0)\n",
    "\n",
    "df_train = df_train.drop(df_train[df_train['dropoff_longitude']<-75].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['dropoff_longitude']>-73].index, axis=0) \n",
    "\n",
    "\n",
    "df_train = df_train.drop(df_train[df_train['pickup_latitude']<40].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['pickup_latitude']>41].index, axis=0)\n",
    "\n",
    "df_train = df_train.drop(df_train[df_train['dropoff_latitude']<40].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['dropoff_latitude']>41].index, axis=0)\n",
    "\n",
    "df_train = df_train.drop(df_train[df_train['passenger_count']<1].index, axis=0)\n",
    "df_train = df_train.drop(df_train[df_train['passenger_count']>6].index, axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.4 Preparing data\n",
    "\n",
    "Here, cleaned data will be made into more analysis friendly data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4.1 Sepearting datetime feature to year, month, day, and hour\n",
    "\n",
    "This will allow us to visualize taxi ride/fare trend for each year, month, day, and hour. Especially, hour data can provide helpful insight on fare dependence on time of the day (i.e. due to traffic)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separating features: year, month, day, hour\n",
    "df_train['pickup_year']= df_train['pickup_datetime'].dt.year\n",
    "df_train['pickup_month']= df_train['pickup_datetime'].dt.month\n",
    "df_train['pickup_date']= df_train['pickup_datetime'].dt.day\n",
    "df_train['pickup_hour']= df_train['pickup_datetime'].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>pickup_year</th>\n",
       "      <th>pickup_month</th>\n",
       "      <th>pickup_date</th>\n",
       "      <th>pickup_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2009-06-15 17:26:21.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21+00:00</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-05 16:52:16.0000002</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16+00:00</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011-08-18 00:35:00.00000049</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00+00:00</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012-04-21 04:30:42.0000001</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42+00:00</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2010-03-09 07:51:00.000000135</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00+00:00</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "0    2009-06-15 17:26:21.0000001          4.5 2009-06-15 17:26:21+00:00   \n",
       "1    2010-01-05 16:52:16.0000002         16.9 2010-01-05 16:52:16+00:00   \n",
       "2   2011-08-18 00:35:00.00000049          5.7 2011-08-18 00:35:00+00:00   \n",
       "3    2012-04-21 04:30:42.0000001          7.7 2012-04-21 04:30:42+00:00   \n",
       "4  2010-03-09 07:51:00.000000135          5.3 2010-03-09 07:51:00+00:00   \n",
       "\n",
       "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "0        -73.844311        40.721319         -73.841610         40.712278   \n",
       "1        -74.016048        40.711303         -73.979268         40.782004   \n",
       "2        -73.982738        40.761270         -73.991242         40.750562   \n",
       "3        -73.987130        40.733143         -73.991567         40.758092   \n",
       "4        -73.968095        40.768008         -73.956655         40.783762   \n",
       "\n",
       "   passenger_count  pickup_year  pickup_month  pickup_date  pickup_hour  \n",
       "0                1         2009             6           15           17  \n",
       "1                1         2010             1            5           16  \n",
       "2                2         2011             8           18            0  \n",
       "3                1         2012             4           21            4  \n",
       "4                1         2010             3            9            7  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4.2 Calculating trip distance\n",
    "\n",
    "        From pickup_longitude, pickup_latidue, dropoff_longitude, and dropoff_latitude, we can apply Haversine method to calculate distance traveled. This feature could be helpful in understanding fare amount per distance traveled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Haversine method for calculating distance from longitude and latitude values\n",
    "\n",
    "def trip_distance(x): \n",
    "    R = 6369 # Earth's radius near NYC, Unit = [km]\n",
    "\n",
    "    lat_1 = radians(x['pickup_latitude'])\n",
    "    lat_2 = radians(x['dropoff_latitude'])\n",
    "    long_1 =radians(x['pickup_longitude'])\n",
    "    long_2 = radians(x['dropoff_longitude'])\n",
    "\n",
    "    delta_long = long_2-long_1\n",
    "    delta_lat = lat_2-lat_1\n",
    "\n",
    "    a= (sin(delta_lat / 2))**2 + cos(lat_1) * cos(lat_2) * (sin(delta_long / 2))**2\n",
    "    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n",
    "\n",
    "    distance = R * c\n",
    "    return distance\n",
    "\n",
    "df_train['distance'] = df_train.apply(trip_distance, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will explore 'distance' series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9738.000000\n",
       "mean        3.325815\n",
       "std         3.606400\n",
       "min         0.000000\n",
       "25%         1.252196\n",
       "50%         2.169971\n",
       "75%         3.915075\n",
       "max        39.464583\n",
       "Name: distance, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.distance.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=sns.distplot(df_train.distance, bins=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I will remove any rows with distance less than 500m. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9354.000000\n",
       "mean        3.453170\n",
       "std         3.623163\n",
       "min         0.500614\n",
       "25%         1.336890\n",
       "50%         2.256889\n",
       "75%         4.037617\n",
       "max        39.464583\n",
       "Name: distance, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = df_train.drop(df_train[df_train['distance']<=0.5].index, axis=0) \n",
    "df_train.distance.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, I will see if the next minimum distance is a acceptable row or not based on fare amount, which should be the base fare. The fare_amount is $4.5 for 500m trip, which seems reasonable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>pickup_year</th>\n",
       "      <th>pickup_month</th>\n",
       "      <th>pickup_date</th>\n",
       "      <th>pickup_hour</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>814</td>\n",
       "      <td>2010-11-24 12:46:52.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2010-11-24 12:46:52+00:00</td>\n",
       "      <td>-73.962681</td>\n",
       "      <td>40.775646</td>\n",
       "      <td>-73.957434</td>\n",
       "      <td>40.777766</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>11</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>0.500614</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "814  2010-11-24 12:46:52.0000001          4.5 2010-11-24 12:46:52+00:00   \n",
       "\n",
       "     pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "814        -73.962681        40.775646         -73.957434         40.777766   \n",
       "\n",
       "     passenger_count  pickup_year  pickup_month  pickup_date  pickup_hour  \\\n",
       "814                1         2010            11           24           12   \n",
       "\n",
       "     distance  \n",
       "814  0.500614  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.distance.min(axis=0)\n",
    "df_train[df_train.distance==0.5006137291536573]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4.3 Fare/distance\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9354.000000\n",
       "mean        4.164339\n",
       "std         1.965118\n",
       "min         0.270750\n",
       "25%         2.928981\n",
       "50%         3.744721\n",
       "75%         4.888658\n",
       "max        50.702490\n",
       "Name: fare_per_distance, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fare_per_distance(x): \n",
    "\n",
    "    fare = x['fare_amount']\n",
    "    distance = x['distance']\n",
    "\n",
    "    fare_per_distance = fare/distance\n",
    "    return fare_per_distance\n",
    "\n",
    "df_train['fare_per_distance'] = df_train.apply(fare_per_distance, axis=1)\n",
    "\n",
    "df_train.fare_per_distance.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax=sns.distplot(df_train.fare_per_distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9346.000000\n",
       "mean        4.141638\n",
       "std         1.773757\n",
       "min         0.270750\n",
       "25%         2.928759\n",
       "50%         3.743218\n",
       "75%         4.884795\n",
       "max        19.351580\n",
       "Name: fare_per_distance, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = df_train.drop(df_train[df_train['fare_per_distance']>20].index, axis=0) \n",
    "df_train.fare_per_distance.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4.3 Creating GeoDataFrame from existing DataFrame\n",
    "\n",
    "Here, I will create a GeoDataFrame for train MWS in order to be able to work with geometries. There can be only one active 'geoseries' per GeoDataFrame. Since we have both pickup location and dropoff location, I will have to convert pickup location first and then convert the dropoff location.\n",
    "    \n",
    "Additionally, I will load a file contraining the five NYC borough (Manhatten, Queens, Stanten Island, Bronx, Brooklyn) boundary information, and spatially join the two geometry. By doing this, I will create two new features 'pickup_boro' and 'dropoff_boro'. My plan is to use this information to assign toll fee features in the future. This has not been implemented yet. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating geodataframe from df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>pickup_year</th>\n",
       "      <th>pickup_month</th>\n",
       "      <th>pickup_date</th>\n",
       "      <th>pickup_hour</th>\n",
       "      <th>distance</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2009-06-15 17:26:21.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21+00:00</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>1.030440</td>\n",
       "      <td>POINT (-73.84431 40.72132)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-05 16:52:16.0000002</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16+00:00</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>8.447481</td>\n",
       "      <td>POINT (-74.01605 40.71130)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011-08-18 00:35:00.00000049</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00+00:00</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1.389089</td>\n",
       "      <td>POINT (-73.98274 40.76127)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012-04-21 04:30:42.0000001</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42+00:00</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>2.798391</td>\n",
       "      <td>POINT (-73.98713 40.73314)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2010-03-09 07:51:00.000000135</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00+00:00</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>1.998529</td>\n",
       "      <td>POINT (-73.96809 40.76801)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "0    2009-06-15 17:26:21.0000001          4.5 2009-06-15 17:26:21+00:00   \n",
       "1    2010-01-05 16:52:16.0000002         16.9 2010-01-05 16:52:16+00:00   \n",
       "2   2011-08-18 00:35:00.00000049          5.7 2011-08-18 00:35:00+00:00   \n",
       "3    2012-04-21 04:30:42.0000001          7.7 2012-04-21 04:30:42+00:00   \n",
       "4  2010-03-09 07:51:00.000000135          5.3 2010-03-09 07:51:00+00:00   \n",
       "\n",
       "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "0        -73.844311        40.721319         -73.841610         40.712278   \n",
       "1        -74.016048        40.711303         -73.979268         40.782004   \n",
       "2        -73.982738        40.761270         -73.991242         40.750562   \n",
       "3        -73.987130        40.733143         -73.991567         40.758092   \n",
       "4        -73.968095        40.768008         -73.956655         40.783762   \n",
       "\n",
       "   passenger_count  pickup_year  pickup_month  pickup_date  pickup_hour  \\\n",
       "0                1         2009             6           15           17   \n",
       "1                1         2010             1            5           16   \n",
       "2                2         2011             8           18            0   \n",
       "3                1         2012             4           21            4   \n",
       "4                1         2010             3            9            7   \n",
       "\n",
       "   distance                    geometry  \n",
       "0  1.030440  POINT (-73.84431 40.72132)  \n",
       "1  8.447481  POINT (-74.01605 40.71130)  \n",
       "2  1.389089  POINT (-73.98274 40.76127)  \n",
       "3  2.798391  POINT (-73.98713 40.73314)  \n",
       "4  1.998529  POINT (-73.96809 40.76801)  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making df_train from dataframe to geodataframe\n",
    "# First, create geoseries from pickup location.\n",
    "gdf_train = gpd.GeoDataFrame(\n",
    "    df_train, geometry=gpd.points_from_xy(df_train.pickup_longitude, df_train.pickup_latitude))\n",
    "gdf_train.crs = {'init' :'epsg:4326'}\n",
    "gdf_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loading ny_borough_boundary shapefile and exploring data. Data format is epsg:4326 (longitude and latitude form) and the data contains:\n",
    "\n",
    "    boro_name: borough name\n",
    "    geometry: multipolygon defining the boundary of the borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'init': 'epsg:4326'}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# GeoDataFrame with geographical boundaries of New York boroughs\n",
    "boro_full = gpd.read_file('/Users/prq-210/ML bootcamp/ny_borough_boundary.shp')\n",
    "boros = boro_full[['boro_name', 'geometry']].set_index('boro_name')\n",
    "boros.geometry.crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>boro_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Bronx</td>\n",
       "      <td>MULTIPOLYGON (((-73.89681 40.79581, -73.89694 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Staten Island</td>\n",
       "      <td>MULTIPOLYGON (((-74.05051 40.56642, -74.05047 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>MULTIPOLYGON (((-73.86706 40.58209, -73.86769 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Queens</td>\n",
       "      <td>MULTIPOLYGON (((-73.83668 40.59495, -73.83678 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Manhattan</td>\n",
       "      <td>MULTIPOLYGON (((-74.01093 40.68449, -74.01193 ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                        geometry\n",
       "boro_name                                                       \n",
       "Bronx          MULTIPOLYGON (((-73.89681 40.79581, -73.89694 ...\n",
       "Staten Island  MULTIPOLYGON (((-74.05051 40.56642, -74.05047 ...\n",
       "Brooklyn       MULTIPOLYGON (((-73.86706 40.58209, -73.86769 ...\n",
       "Queens         MULTIPOLYGON (((-73.83668 40.59495, -73.83678 ...\n",
       "Manhattan      MULTIPOLYGON (((-74.01093 40.68449, -74.01193 ..."
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boros.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot borough boundary map\n",
    "ax = boros.plot(figsize=(7,7), color='none', edgecolor='gainsboro', zorder=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Below, I assign borough to pickup locations and name the columns 'pickup_geometry' and 'pickup_boro'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>pickup_year</th>\n",
       "      <th>pickup_month</th>\n",
       "      <th>pickup_date</th>\n",
       "      <th>pickup_hour</th>\n",
       "      <th>distance</th>\n",
       "      <th>pickup_geometry</th>\n",
       "      <th>pickup_boro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2009-06-15 17:26:21.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21+00:00</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>1.030440</td>\n",
       "      <td>POINT (-73.84431 40.72132)</td>\n",
       "      <td>Queens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-05 16:52:16.0000002</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16+00:00</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>8.447481</td>\n",
       "      <td>POINT (-74.01605 40.71130)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011-08-18 00:35:00.00000049</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00+00:00</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1.389089</td>\n",
       "      <td>POINT (-73.98274 40.76127)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012-04-21 04:30:42.0000001</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42+00:00</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>2.798391</td>\n",
       "      <td>POINT (-73.98713 40.73314)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2010-03-09 07:51:00.000000135</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00+00:00</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>1.998529</td>\n",
       "      <td>POINT (-73.96809 40.76801)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "0    2009-06-15 17:26:21.0000001          4.5 2009-06-15 17:26:21+00:00   \n",
       "1    2010-01-05 16:52:16.0000002         16.9 2010-01-05 16:52:16+00:00   \n",
       "2   2011-08-18 00:35:00.00000049          5.7 2011-08-18 00:35:00+00:00   \n",
       "3    2012-04-21 04:30:42.0000001          7.7 2012-04-21 04:30:42+00:00   \n",
       "4  2010-03-09 07:51:00.000000135          5.3 2010-03-09 07:51:00+00:00   \n",
       "\n",
       "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "0        -73.844311        40.721319         -73.841610         40.712278   \n",
       "1        -74.016048        40.711303         -73.979268         40.782004   \n",
       "2        -73.982738        40.761270         -73.991242         40.750562   \n",
       "3        -73.987130        40.733143         -73.991567         40.758092   \n",
       "4        -73.968095        40.768008         -73.956655         40.783762   \n",
       "\n",
       "   passenger_count  pickup_year  pickup_month  pickup_date  pickup_hour  \\\n",
       "0                1         2009             6           15           17   \n",
       "1                1         2010             1            5           16   \n",
       "2                2         2011             8           18            0   \n",
       "3                1         2012             4           21            4   \n",
       "4                1         2010             3            9            7   \n",
       "\n",
       "   distance             pickup_geometry pickup_boro  \n",
       "0  1.030440  POINT (-73.84431 40.72132)      Queens  \n",
       "1  8.447481  POINT (-74.01605 40.71130)   Manhattan  \n",
       "2  1.389089  POINT (-73.98274 40.76127)   Manhattan  \n",
       "3  2.798391  POINT (-73.98713 40.73314)   Manhattan  \n",
       "4  1.998529  POINT (-73.96809 40.76801)   Manhattan  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros = gpd.sjoin(gdf_train, boros, how='left',op='intersects')\n",
    "gdf_train_with_boros.rename_geometry('pickup_geometry', inplace=True)\n",
    "gdf_train_with_boros = gdf_train_with_boros.rename(columns={'index_right': 'pickup_boro'})\n",
    "gdf_train_with_boros.crs = {'init' :'epsg:4326'}\n",
    "gdf_train_with_boros.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, creating geoseries with 'dropoff_longitude' and 'dropoff_latitude' to create geoseries for dropoff location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/prq-210/opt/anaconda3/lib/python3.7/site-packages/geopandas/tools/sjoin.py:61: UserWarning: CRS of frames being joined does not match!(None != {'init': 'epsg:4326'})\n",
      "  \"(%s != %s)\" % (left_df.crs, right_df.crs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>pickup_year</th>\n",
       "      <th>pickup_month</th>\n",
       "      <th>pickup_date</th>\n",
       "      <th>pickup_hour</th>\n",
       "      <th>distance</th>\n",
       "      <th>pickup_geometry</th>\n",
       "      <th>pickup_boro</th>\n",
       "      <th>dropoff_geometry</th>\n",
       "      <th>dropoff_boro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2009-06-15 17:26:21.0000001</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2009-06-15 17:26:21+00:00</td>\n",
       "      <td>-73.844311</td>\n",
       "      <td>40.721319</td>\n",
       "      <td>-73.841610</td>\n",
       "      <td>40.712278</td>\n",
       "      <td>1</td>\n",
       "      <td>2009</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "      <td>1.030440</td>\n",
       "      <td>POINT (-73.84431 40.72132)</td>\n",
       "      <td>Queens</td>\n",
       "      <td>POINT (-73.84161 40.71228)</td>\n",
       "      <td>Queens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-05 16:52:16.0000002</td>\n",
       "      <td>16.9</td>\n",
       "      <td>2010-01-05 16:52:16+00:00</td>\n",
       "      <td>-74.016048</td>\n",
       "      <td>40.711303</td>\n",
       "      <td>-73.979268</td>\n",
       "      <td>40.782004</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>8.447481</td>\n",
       "      <td>POINT (-74.01605 40.71130)</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>POINT (-73.97927 40.78200)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011-08-18 00:35:00.00000049</td>\n",
       "      <td>5.7</td>\n",
       "      <td>2011-08-18 00:35:00+00:00</td>\n",
       "      <td>-73.982738</td>\n",
       "      <td>40.761270</td>\n",
       "      <td>-73.991242</td>\n",
       "      <td>40.750562</td>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1.389089</td>\n",
       "      <td>POINT (-73.98274 40.76127)</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>POINT (-73.99124 40.75056)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012-04-21 04:30:42.0000001</td>\n",
       "      <td>7.7</td>\n",
       "      <td>2012-04-21 04:30:42+00:00</td>\n",
       "      <td>-73.987130</td>\n",
       "      <td>40.733143</td>\n",
       "      <td>-73.991567</td>\n",
       "      <td>40.758092</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>2.798391</td>\n",
       "      <td>POINT (-73.98713 40.73314)</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>POINT (-73.99157 40.75809)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2010-03-09 07:51:00.000000135</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2010-03-09 07:51:00+00:00</td>\n",
       "      <td>-73.968095</td>\n",
       "      <td>40.768008</td>\n",
       "      <td>-73.956655</td>\n",
       "      <td>40.783762</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>1.998529</td>\n",
       "      <td>POINT (-73.96809 40.76801)</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>POINT (-73.95665 40.78376)</td>\n",
       "      <td>Manhattan</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             key  fare_amount           pickup_datetime  \\\n",
       "0    2009-06-15 17:26:21.0000001          4.5 2009-06-15 17:26:21+00:00   \n",
       "1    2010-01-05 16:52:16.0000002         16.9 2010-01-05 16:52:16+00:00   \n",
       "2   2011-08-18 00:35:00.00000049          5.7 2011-08-18 00:35:00+00:00   \n",
       "3    2012-04-21 04:30:42.0000001          7.7 2012-04-21 04:30:42+00:00   \n",
       "4  2010-03-09 07:51:00.000000135          5.3 2010-03-09 07:51:00+00:00   \n",
       "\n",
       "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
       "0        -73.844311        40.721319         -73.841610         40.712278   \n",
       "1        -74.016048        40.711303         -73.979268         40.782004   \n",
       "2        -73.982738        40.761270         -73.991242         40.750562   \n",
       "3        -73.987130        40.733143         -73.991567         40.758092   \n",
       "4        -73.968095        40.768008         -73.956655         40.783762   \n",
       "\n",
       "   passenger_count  pickup_year  pickup_month  pickup_date  pickup_hour  \\\n",
       "0                1         2009             6           15           17   \n",
       "1                1         2010             1            5           16   \n",
       "2                2         2011             8           18            0   \n",
       "3                1         2012             4           21            4   \n",
       "4                1         2010             3            9            7   \n",
       "\n",
       "   distance             pickup_geometry pickup_boro  \\\n",
       "0  1.030440  POINT (-73.84431 40.72132)      Queens   \n",
       "1  8.447481  POINT (-74.01605 40.71130)   Manhattan   \n",
       "2  1.389089  POINT (-73.98274 40.76127)   Manhattan   \n",
       "3  2.798391  POINT (-73.98713 40.73314)   Manhattan   \n",
       "4  1.998529  POINT (-73.96809 40.76801)   Manhattan   \n",
       "\n",
       "             dropoff_geometry dropoff_boro  \n",
       "0  POINT (-73.84161 40.71228)       Queens  \n",
       "1  POINT (-73.97927 40.78200)    Manhattan  \n",
       "2  POINT (-73.99124 40.75056)    Manhattan  \n",
       "3  POINT (-73.99157 40.75809)    Manhattan  \n",
       "4  POINT (-73.95665 40.78376)    Manhattan  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros = gpd.GeoDataFrame(\n",
    "    gdf_train_with_boros, geometry=gpd.points_from_xy(gdf_train_with_boros.dropoff_longitude, gdf_train_with_boros.dropoff_latitude))\n",
    "gdf_train_with_boros = gpd.sjoin(gdf_train_with_boros, boros, how='left',op='intersects')\n",
    "\n",
    "gdf_train_with_boros = gdf_train_with_boros.rename(columns={'index_right': 'dropoff_boro'})\n",
    "gdf_train_with_boros = gdf_train_with_boros.rename(columns={'geometry': 'dropoff_geometry'})\n",
    "\n",
    "gdf_train_with_boros.head()\n",
    "#gdf_train_with_boros.rename_geometry('dropoff_geometry', inplace=True)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Manhattan        8672\n",
       "Queens            451\n",
       "Brooklyn          209\n",
       "Bronx               8\n",
       "Staten Island       1\n",
       "Name: pickup_boro, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros['pickup_boro'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9341"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros['pickup_boro'].value_counts().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Manhattan        8364\n",
       "Queens            462\n",
       "Brooklyn          446\n",
       "Bronx              49\n",
       "Staten Island       2\n",
       "Name: dropoff_boro, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros['dropoff_boro'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9323"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_train_with_boros['dropoff_boro'].value_counts().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Next steps\n",
    "\n",
    "Questions to answer:\n",
    "    1. Does time of the day affect fare amount?\n",
    "    2. Does travel distance affect fare amount?\n",
    "    3. Does time of the day affect fare amount per distance?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a18ea0490>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='pickup_hour',y='fare_amount',data=df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1ac6ae10>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='distance',y='fare_amount',data=df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1a286a50>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='pickup_hour',y='fare_per_distance',data=df_train)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
